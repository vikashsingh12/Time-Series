# -*- coding: utf-8 -*-
"""Time Series Analysis EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i87tf0nI78uPHnHjr1eQqclvvZGtMwgP
"""

!pip install download

from __future__ import absolute_import,division,print_function,unicode_literals

import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
from datetime import datetime

import pandas as pd

from download import download

mpl.rcParams['figure.figsize'] = (8,6)
mpl.rcParams['axes.grid'] = False

print("Import Succesfull")

path = download('https://archive.ics.uci.edu/ml/machine-learning-databases/00501/PRSA2017_Data_20130301-20170228.zip','/tmp/aq', kind="zip")

!ls -alrt /tmp/aq/PRSA_Data_20130301-20170228

df = pd.read_csv('/tmp/aq/PRSA_Data_20130301-20170228/PRSA_Data_Dingling_20130301-20170228.csv', encoding='ISO-8859-1')

df

df.info()

def convert_to_date(x):
  return datetime.strptime(x, '%Y %m %d %H')

aq_df = pd.read_csv('/tmp/aq/PRSA_Data_20130301-20170228/PRSA_Data_Dingling_20130301-20170228.csv', parse_dates=[['year','month','day','hour']], date_parser=convert_to_date, keep_date_col=True)

aq_df.head(3)

aq_df.info()

aq_df['month'] =  pd.to_numeric(aq_df['month'])

print("Rows     :", aq_df.shape[0])
print("Columns  :", aq_df.shape[1])
print("\n Features \n", aq_df.columns.to_list())
print("\n Missing Values \n", aq_df.isnull().any())
print("\n Unique Values \n", aq_df.nunique())

aq_df.describe()

aq_df_non_indexed = aq_df.copy()

#The main advantage of indexing is we can query it very fast
#We can do a lot of subsetting and filtering
#A lot of plots needs indexed data
aq_df = aq_df.set_index('year_month_day_hour')

aq_df.index

aq_df.head(2)

aq_df.loc['2013-03-01':'2013-03-05']

aq_df.loc['2013':'2015']

pm_data = aq_df['PM2.5']
pm_data.head(2)

pm_data.plot(grid = True)

aq_df_2015 = aq_df.loc['2015']
pm_data_2015 = aq_df_2015['PM2.5']
pm_data_2015.plot(grid = True)

aq_df_2016 = aq_df.loc['2016']
pm_data_2016 = aq_df_2016['PM2.5']
pm_data_2016.plot(grid = True)

import plotly.express as px
fig = px.line(aq_df_non_indexed, x = 'year_month_day_hour',y = 'PM2.5',title = 'PM2.5 with slider')

fig.update_xaxes(
    rangeslider_visible= True,
    rangeselector=dict(
                        buttons = list([
                        dict(count = 1,label = '1y',step='year',stepmode = "backward"),
                        dict(count = 2,label = '2y',step='year',stepmode = "backward"),
                        dict(count = 3,label = '3y',step='year',stepmode = "backward"),
                        dict(step= 'all')
                            ])        
                        )
                   )
fig.show()

fig = px.line(aq_df_non_indexed, x = 'year_month_day_hour',y = 'TEMP',title = 'TEMP with slider')

fig.update_xaxes(
    rangeslider_visible= True,
    rangeselector=dict(
                        buttons = list([
                        dict(count = 1,label = '1y',step='year',stepmode = "backward"),
                        dict(count = 2,label = '2y',step='year',stepmode = "backward"),
                        dict(count = 3,label = '3y',step='year',stepmode = "backward"),
                        dict(step= 'all')
                            ])        
                        )
                   )
fig.show()

df_2014 = aq_df['2014'].reset_index()
df_2015 = aq_df['2015'].reset_index()

df_2014['month_day_hour'] = df_2014.apply(lambda x : str(x['month'])+"."+x['day'],axis = 1)
df_2015['month_day_hour'] = df_2015.apply(lambda x : str(x['month'])+"."+x['day'],axis = 1)

plt.plot(df_2014['month_day_hour'],df_2014['PM2.5'])
plt.plot(df_2015['month_day_hour'],df_2015['PM2.5'])

plt.legend(['2014','2015'])
plt.xlabel('Month')
plt.ylabel('PM2.5')

plt.title('Air qulaity 2014 and 2015')

df_2014['month_day_hour']

#fig = px.line(df_2014, x = 'year_month_day_hour',y='PM2.5',title='PM2.5 with slider')
#fig.add_trace(px.line(df_2015,x='year_month_day_hour',y='PM2.5',).data[0])

#fig.show()

aq_df['2014':'2016'][['month','PM2.5']].groupby('month').describe()

aq_df.head(2)

aq_df['2014':'2016'][['month','PM2.5','TEMP']].groupby('month').agg({'PM2.5':['min','max'],'TEMP':['min','max']})

aq_df_2015 = aq_df['2015']
pm_data_2015 = aq_df_2015[['PM2.5','TEMP']]
pm_data_2015.plot(subplots = True)

aq_df[['PM2.5','TEMP']].hist()
#bimodal distribution

aq_df[['TEMP']].plot(kind = 'density')

pd.plotting.lag_plot(aq_df['TEMP'],lag =1)
#lag plot is a special type of lag scatter plot where x axis is the cuurent time and the y axis is th elag perios
#by default lag period is 1

pd.plotting.lag_plot(aq_df['TEMP'],lag =10)

pd.plotting.lag_plot(aq_df['TEMP'],lag =24)

pd.plotting.lag_plot(aq_df['TEMP'],lag =8640)

pd.plotting.lag_plot(aq_df['TEMP'],lag =4320) #negative correlation

pd.plotting.lag_plot(aq_df['TEMP'],lag =2150) #no correlation

aq_df_2015 = aq_df['2015']
pm_data_2015 = aq_df_2015[['PM2.5','TEMP','PRES']]
pm_data_2015.plot(subplots = True)

multi_data = aq_df[['PM2.5','TEMP','PRES','RAIN','DEWP']]
multi_data.plot(subplots = True)

multi_data = aq_df[['PM2.5','SO2','NO2','O3','CO']]
multi_data.plot(subplots = True)

aq_df['2014':'2015'][['PM2.5','O3']].plot(figsize=(15,8),linewidth= 3,fontsize = 15)
plt.xlabel('year_month_day_hour')

aq_df_2015['PM2.5']

aq_df_2015

aq_df.isnull().values.any()

aq_df.isnull().any()

aq_df.isnull().sum()

g = sns.pairplot(aq_df[['PM2.5','SO2','NO2','O3','CO']])

aq_corr = aq_df[['PM2.5','SO2','NO2','O3','CO']].corr(method = 'pearson')
aq_corr

sns.heatmap(aq_corr,annot=True)

aq_df.groupby('wd').agg(median=('PM2.5','median'),mean=('PM2.5','mean'),max=('PM2.5','max'),min=('PM2.5','min')).reset_index()

aq_df_na = aq_df.copy()
aq_df_na = aq_df_na.dropna()

pd.plotting.autocorrelation_plot(aq_df_na['2014':'2016']['TEMP'])

aq_df_na['TEMP'].resample('1m').mean()

pd.plotting.autocorrelation_plot(aq_df_na['2014':'2016']['TEMP'].resample('1m').mean())

pd.plotting.autocorrelation_plot(aq_df_na['2014':'2016']['PM2.5'].resample('1m').mean())

"""# Handling Missing Value"""

aq_df.isnull().sum()

aq_df.query('TEMP != TEMP')

aq_df.query('TEMP!=TEMP').count()

aq_df[aq_df['PM2.5'].isnull()]

aq_df['2015-02-21 10':'2015-02-21 20']

aq_df_imp = aq_df['2015-02-21 10':'2015-02-21 20'][['TEMP']]

aq_df_imp['TEMP_FFILL']= aq_df_imp['TEMP'].fillna(method = 'ffill')#ForwardFill

aq_df_imp

aq_df_imp['TEMP_BFILL']= aq_df_imp['TEMP'].fillna(method = 'bfill')#Backwardfill

aq_df_imp['TEMP_ROLLING'] = aq_df_imp['TEMP'].rolling(window=2, min_periods=1).mean()

aq_df.loc[aq_df_imp.index + pd.offsets.DateOffset(years = -1)]['TEMP']

aq_df_imp = aq_df_imp.reset_index()

aq_df_imp

aq_df_imp['TEMP_PREVY'] = aq_df_imp.apply(lambda x: aq_df.loc[x['year_month_day_hour']- pd.offsets.DateOffset(years = -1)]['TEMP'] if pd.isna(x['TEMP']) else x['TEMP'],axis=1)

aq_df_imp

